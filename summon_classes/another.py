from core import root
from datastore.dsources import SRC
from datastore.misc import RACES
from myrandom import Chance
from resists.rstcls import Resist
from resists.rstmanager import ResistManager
from resists.rststates import Ward
import varbank as vb
from vkmodule import send
from utils import countObjectsOfCertainClassInList

class Ectoplasm(root.Hero):

    def __init__(self, _id):
        super().__init__(_id)
        self.race = RACES.ARTIFICIAL
        self.resists = ResistManager({SRC.WEAPON: Resist(0, Ward)})

    def options(self, other):
        opt_report = f'[1]* {{–í–æ–¥–∞}} –®–ª–µ–ø–æ–∫ —Å–ª–∏–∑–∏. \n' + super().options(other)
        return opt_report

    def preChoiceAction(self, other, ctx):
        if self.health == self.max_hp: return 0
        if Chance(65 - countObjectsOfCertainClassInList(vb.teams[self.team], Ectoplasm) * 20):
            newChild = Ectoplasm(self.id)
            send(ctx, f'–ö–æ–≤–∞—Ä–Ω–∞—è —ç–∫—Ç–æ–ø–ª–∞–∑–º–∞ —Ä–∞–∑–º–Ω–æ–∂–∏–ª–∞—Å—å –æ—Ç —É–¥–∞—Ä–∞!')
            vb.teams[self.team].append(newChild)

    def firstAction(self, other, ctx):
        return self.MagicPattern(other, ctx, SRC.WATER, 0, meleeFlag=True)




# class CyclopesKing(root.Hero):
#     def __init__(self, _id):  # –°—Ç—Ä–∞–∂ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏ "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–æ–µ"
#         super().__init__(_id)
#         self.isMercenary = True
#         # self.master.item_skills += '0'  # –û–±—É—á–∞–µ—Ç –ê—É—Ä–∞–º.
#
#     def options(self, other):
#         opt_report = f'[1] üèπ –ú–µ—Ç–∞–Ω–∏–µ –≤–∞–ª—É–Ω–∞. –î–∞–ª—å–Ω–∏–π –±–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–æ–≤–∏–Ω—ã –±—Ä–æ–Ω–∏. \n' \
#                      f'[2] –ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥. –°–Ω—è—Ç–∏–µ –æ—Ö—Ä–∞–Ω—ã –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ —Å–∞–º–º–æ–Ω–∞. \n' \
#                      f'[3] –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ {50 + self.lvl * 2} –∑–¥–æ—Ä–æ–≤—å—è. \n' \
#                      + super().options(other)
#         return opt_report
#
#     def firstAction(self, other, ctx, kind=0):
#         if self.evade(other, 1, ctx):
#             return 0
#         damage = round((max(1, self.dmg - other.arm * 0.5 + randint(1, 5))) * mf.modtype(other, 0, ctx))
#         sol = self.luck(ctx, other)
#         if sol == -1:
#             return 0
#         other.health -= round(damage * sol)
#         if sol > 1:
#             crit_report = '[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!] ' + message_bank(self.cls, round(damage * sol), other.health)
#             send(ctx, crit_report)
#         else:
#             send(ctx, message_bank(self.cls, damage, other.health))
#         return round(damage * sol)
#
#     def secondAction(self, other, ctx):
#         try:
#             other.summons.guard = False
#             send(ctx, f'{other.summons.cls_name} –Ω–µ –≤ —Å–∏–ª–∞—Ö –¥–µ—Ä–∂–∞—Ç—å –æ–±–æ—Ä–æ–Ω—É –ø–µ—Ä–µ–¥ –≤–∑–æ—Ä–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–ª–∞–∑–∞ —Ü–∏–∫–ª–æ–ø–∞. –û—Ö—Ä–∞–Ω–∞ —Å–Ω—è—Ç–∞ - –ø—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω.')
#             return 1
#         except AttributeError:
#             send(ctx, '–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Å–∞–º–º–æ–Ω–∞ —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞-—Ç–æ –Ω–µ—Ç.')
#             return -1
#
#     def fourthAction(self, other, ctx):
#         send(ctx, f'–¶–∏–∫–ª–æ–ø –æ—Ç–∫—É–ø–æ—Ä–∏–ª –±—É—Ç—ã–ª–∫—É —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –ø–∏–≤–∞ "–ß–µ—Ä–Ω–∏–≥–æ–≤—Å–∫–æ–µ". –ê –≤–∫—É—Å –µ—â–µ –ø—Ä–∏—è—Ç–Ω–µ–µ, —á–µ–º –∑–∞–ø–∞—Ö! –û–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {self.heal(50 + self.lvl * 2)} –∑–¥–æ—Ä–æ–≤—å—è.')
#
#     def levelup(self, ind=1):
#         self.lvl += ind
#         self.dmg += 3 * ind
#         self.crit += 2 * ind
#
#
# class Gargoyle(root.Hero):
#     def __init__(self, _id):
#         super().__init__(_id)
#         self.race = RACES.DEMON
#
#     def options(self, other):
#         opt_report = f'[1] –ì—Ä–∞–¥ –æ—Å–∫–æ–ª–∫–æ–≤. –ë–ª–∏–∂–Ω–∏–π –±–æ–π, –∏—Å—Ç–æ—á–Ω–∏–∫: –ü–æ—Ä—è–¥–æ–∫. \n ' \
#                      f'[2] –ü–æ—Å–ª–∞–Ω–∏–µ –ú–∞–≤—Ä–µ–∑–µ–Ω–∞. –ú–∞—Å—Å–æ–≤–æ–µ –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ (100%) –∏ –û—Å–ª–∞–±–ª–µ–Ω–∏–µ —Å —à–∞–Ω—Å–æ–º {12 * self.lvl}% \n' \
#                      + super().options(other)
#         return opt_report
#
#     def firstAction(self, other, ctx, kind=0):
#         return root.Hero.firstAction(self, other, ctx, 4)
#
#     def secondAction(self, other, ctx):
#         report = '–ì–æ—Ä–≥—É–ª—å—è –∏—Å–ø—É—Å–∫–∞–µ—Ç –∂—É—Ç–∫–∏–π —É—Ç—Ä–æ–±–Ω—ã–π —Ä—ë–≤, –∫–æ—Ç–æ—Ä—ã–π —á—É—Ç—å –Ω–µ —Ä–∞–∑–æ—Ä–≤–∞–ª –≤–∞—à–∏ –±–∞—Ä–∞–±–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–æ–Ω–∫–∏. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω–æ–µ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ. \n'
#         for enemy in vb.teams[(self.team + 1) % 2]:
#             add_effect(other, '-slow', 1)
#             report += f'{enemy.cls_name} –±—ã–ª –∑–∞–º–µ–¥–ª–µ–Ω... '
#             if mf.chance(12 * self.lvl):
#                 add_effect(enemy, '-weakness', 2 + self.lvl // 5)
#                 report += '–∏ –æ—Å–ª–∞–±–ª–µ–Ω!'
#             report += '\n'
#         send(ctx, report)
#
#     def levelup(self, ind=1):
#         self.lvl += ind
#         self.dmg += 3
#         add_effect(self, 'contr', 2)

# class WiseTree(root.Hero):
#     def __init__(self, master):
#         alias = '–¥—É–±'
#         super().__init__(master, alias)
#         self.race = RACES.DEMON
#         self.spikes = 1
#
#     def options(self, other):
#         opt_report = f'[1] –õ–µ—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ: +–±—Ä–æ–Ω—è –Ω–∞ {self.lvl * 4 + 10} –ø—Ç. \n ' \
#                      f'[2] –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º—É–¥—Ä–æ—Å—Ç—å—é: +{self.lvl//5} —É—Ä–æ–≤–Ω–µ–π –∏ +5% —Ç–æ—Ä–≥–æ–≤–ª–∏ \n ' \
#                      f'[3] –û–ø—É—Ç—ã–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω—è–º–∏: –æ–±–µ–∑–¥–≤–∏–∂–∏—Ç—å, –æ—Å—Ç–∞–ª–æ—Å—å {self.spikes} –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π \n ' \
#                      f'[4] –°–∏–ª–∞ –∑–µ–º–ª–∏: –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–π –∫ —Å—Ç–∏—Ö–∏—è–º \n ' \
#                      + super().options(other)
#         return opt_report
#
#     def firstAction(self, other, ctx, kind=0):
#         send(ctx, f'–î–µ—Ä–µ–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ {self.master.heal(randint(30, 65))} –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–∫—Ä–µ–ø–∏–ª–æ –≤–∞—à—É –±—Ä–æ–Ω—é –Ω–∞ {self.lvl * 4 + 10}')
#         self.master.arm += self.lvl * 4 + 10
#
#     def secondAction(self, other, ctx):
#         self.master.levelup(self.lvl//5)
#         self.master.merchant += 0.05
#         send(ctx, f'–î–µ—Ä–µ–≤–æ –¥–∞—ë—Ç –ø–∞—Ä–æ—á–∫—É —É—Ä–æ–∫–æ–≤ –Ω–∞—à–µ–º—É –≥–µ—Ä–æ—é, –ø–æ–¥–Ω–∏–º–∞—è –µ–≥–æ —É—Ä–æ–≤–Ω–∏ –∏ –æ–±—É—á–∞—è –µ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ç–µ–æ—Ä–∏–∏.')
#
#     def fourthAction(self, other, ctx):
#         if self.spikes > 0:
#             other.stun += 1
#             self.spikes -= 1
#             send(ctx, f'–î—Ä–µ–≤–æ –æ–ø—É—Ç—ã–≤–∞–µ—Ç –≤–µ—Ç–≤—è–º–∏ {other}, –Ω–µ –æ—Å—Ç–∞–≤–ª—è—è –µ–º—É —à–∞–Ω—Å–∞ –Ω–∞ –ø–æ–±–µ–≥')
#         else:
#             send(ctx, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—ã –≤ —Ç–µ–±–µ –≤–∏–∂—É —è.')
#             return -1
#
#     def fifthAction(self, other, ctx):
#         send(ctx, '–î–µ—Ä–µ–≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —Å—Ç–∏—Ö–∏—è–º.')
#         add_effect(self.master, '+protection', 2)

















