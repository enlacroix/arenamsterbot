from random import randint

from datastore.deffect import EFF
from datastore.misc import RACES
from myrandom import Chance
from core.root import Hero
from vkmodule import send


class BeerElemental(Hero):
    def __init__(self, _id):
        super().__init__(_id)
        self.ulta = 3
        self.race = RACES.MYST

    def options(self, other):
        opt_report = f'[1] "Homie De Flanders". –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–æ–µ–≤–æ–≥–æ –¥—É—Ö–∞ –Ω–∞ {10+self.lvl*2}, –µ—Å–ª–∏ –¥–µ–ø—Ä–µ—Å—Å–∏—è (<0), –∏–Ω–∞—á–µ +5 –ø—Ç. \n ' \
                     f'[2] "–ú–ß–°, –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ". –û–ø—å—è–Ω–µ–Ω–∏–µ, {70 + self.lvl*2}%: –≤—Ä–µ–º–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å \n' \
                     f'[3] "–û–≥—É—Ä–µ—á–Ω–æ–µ". –î–∞—Ç—å {1 + self.lvl//5} –≥–∞—Ä–∞–Ω—Ç –∫—Ä–∏—Ç –∞—Ç–∞–∫—É. \n' \
                     f'[4] "–¢–æ—Ä–ø–µ–¥–∞". –û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –æ—Å—Ç–∞–ª–æ—Å—å {self.ulta} —à—Ç. \n'\
                     + super().options(other)
        return opt_report

    def preChoiceAction(self, other, ctx):
        casino = -randint(10, 80)
        self.addGold(casino)
        send(ctx, f'–ü–∏–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å –ø—Ä–æ—Å–∞–¥–∏–ª {-casino} –∑–æ–ª–æ—Ç–∞ –≤ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã!')

    def firstAction(self, other, ctx):
        other.morale = other.morale + 10 + self.lvl*2 if other.morale < 0 else other.morale + 5
        send(ctx, f'–ü–∏–≤–æ üç∫ —Ç–µ—á—ë—Ç –≤–æ –º–Ω–µ, —è –µ–¥–∏–Ω —Å –ø–∏–≤–æ–º üçª ... \n –ü–∏–≤–æ üç∫ —Ç–µ—á—ë—Ç –≤–æ –º–Ω–µ, —è –µ–¥–∏–Ω —Å –ø–∏–≤–æ–º üçª ... \n –ü–∏–≤–æ üç∫ —Ç–µ—á—ë—Ç –≤–æ –º–Ω–µ, —è –µ–¥–∏–Ω —Å –ø–∏–≤–æ–º üçª ... ')

    def secondAction(self, other, ctx):
        if Chance(70 + self.lvl*2):
            other.addEffect(EFF.DRUNK, 2, power=[20+self.lvl])
            send(ctx, f'–°–º–æ—Ç—Ä—é —Ç–µ–±—è —Å 2009, —Å—Ç–∞–ª –ø–∏–≤–Ω—ã–º –∞–ª–∫–æ–≥–æ–ª–∏–∫–æ–º, —Å–ø–∞—Å–∏–±–æ –∑–∞ —é–Ω–æ—Å—Ç—å!')
        else:
            send(ctx, f'[–ü–†–û–í–ê–õ]. –í—ã –∑–∞–±—ã–ª–∏, —á—Ç–æ –æ–±–µ—â–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–¥–∏–Ω —á–∞—Å. –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å —É–∫–∞—Ç–∏–ª –Ω–∞ –ø—å—è–Ω–∫—É, —Å—á–∞—Å—Ç–ª–∏–≤–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è.')

    def thirdAction(self, other, ctx):
        if self.allyActionForEnemy(other, ctx): return -1
        other.crit_bank += 1 + self.lvl//5
        send(ctx, f'–ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ {other} –±—É–¥–µ—Ç –∫—Ä–∞–π–Ω–µ —É–¥–∞—á–Ω–æ–π.')


    def fourthAction(self, other, ctx):
        if self.ulta > 0:
            self.ulta -= 1
            other.addEffect(EFF.POISON, 2, power=[1.5])
            send(ctx, f'–ö–∞–∫–∞—è –º–µ—Ä–∑–æ—Å—Ç—å... {other} –≥—Ä–æ–∑–∏—Ç —Ç—Ä—ë—Ö–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –ø—Ä–æ–º—ã–≤–∞–Ω–∏—è.')
        else:
            send(ctx, '–£ –≤–∞—Å –Ω–µ—Ç "—Å–Ω–∞—Ä—è–¥–æ–≤".')
            return -1

    def levelup(self, ind=1):
        if self.hidden_lvl % 6 == 0: self.ulta += 1
        super().levelup(ind)