from string import Template
from core import root
from random import shuffle
from datastore.deffect import EFF
from datastore.dsources import SRC
from datastore.misc import RACES
from myrandom import Chance
from resists.rstcls import Resist
from resists.rstmanager import ResistManager
from resists.rststates import Ward, Immunity
from vkmodule import send, longpoll, id_checker
import varbank as vb


class Dracolich(root.Hero):
    size = 2

    def __init__(self, pvp_id):
        super().__init__(pvp_id)
        self.resists = ResistManager({SRC.MOVEMENT: Resist(0, Ward), SRC.DEATH: Resist(80, Ward), SRC.LOWERINGLEVEL: Resist(0, Immunity), SRC.POLYMORPH: Resist(0, Ward)})
        self.race = RACES.UNDEAD

    def preChoiceAction(self, other, ctx):
        send(ctx, f'–î—Ä–∞–∫–æ–Ω —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞ {self.heal(self.max_hp // 6)} –∑–¥–æ—Ä–æ–≤—å—è. \n')

    def calculateLowHPCoef(self):
        return (1 - self.health / self.max_hp) * 36

    def options(self, other):
        opt_rep = f'[1] –î—ã—Ö–∞–Ω–∏–µ —Å–º–µ—Ä—Ç–∏. –ú–∞—Å—Å–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ ({70 + self.lvl}%). \n'\
                  f'[2]* –ì–Ω–∏–ª—ã–µ –∏—Å–ø–∞—Ä–µ–Ω–∏—è. –ü–∞–¥–µ–Ω–∏–µ –±–æ–µ–≤–æ–≥–æ –¥—É—Ö–∞, –û—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ä—è–¥–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. \n'\
                  f'[3] –ü–æ–∂–∏—Ä–∞–Ω–∏–µ. –ï—Å–ª–∏ —É —Ü–µ–ª–∏ –º–µ–Ω—å—à–µ 20% –æ—Ç –º–∞–∫—Å –û–ó, —Ç–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–º–µ—Ä—Ç—å. \n'\
                  f'[4] –í—ã—Å—à–∞—è –ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è. –í–æ—Å–∫—Ä–µ—Å–∏—Ç—å –Ω–µ–∂–∏—Ç—å, —É–±–∏—Ç—É—é –≤–æ –≤—Ä–µ–º—è –±–æ—è. \n'\
                  f'[5]* –£–¥–∞—Ä —Ö–≤–æ—Å—Ç–æ–º. 75% –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ –ø–æ –ú–µ—Ç–∫–µ. \n' + super().options(other)
        return opt_rep

    def firstAction(self, other: root.HeroInstance, ctx):
        for enemy in vb.teams[other.team]:
            enemy: root.HeroInstance
            x = self.MagicPattern(enemy, ctx, mana=-1, source=SRC.DEATH, evadeCoef=-self.calculateLowHPCoef())
            if x not in (0, -1) and Chance(70+self.lvl): enemy.addEffect(EFF.POISON, 2, power=[1.3 + self.lvl * 0.03])

    def secondAction(self, other: root.HeroInstance, ctx):
        shuffle(vb.teams[other.team])
        report = f''
        for enemy in other.getOwnRow():
            report += f'{enemy} –ø–æ—Ç–µ—Ä—è–ª {7 + self.lvl*2} –±–æ–µ–≤–æ–≥–æ –¥—É—Ö–∞. '
            enemy.morale -= 7 + self.lvl*2
            if Chance(85):
                enemy.addEffect(EFF.WEAKNESS, 2, power=[0.5])
                report += '–ò –±—å–ª –æ—Å–ª–∞–±–ª–µ–Ω.'
            report += '\n'
        send(ctx, report)


    def thirdAction(self, other, ctx):
        if other.health >= other.max_hp * 0.2:
            send(ctx, f'–í {other} –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏–ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç—É –∞—Ç–∞–∫—É.')
            return -1
        other.kill()
        send(ctx, f'–î—Ä–∞–∫–æ–Ω –ø–æ–∂–∏—Ä–∞–µ—Ç –æ—Å–ª–∞–±–µ–≤—à–µ–≥–æ {other}, –Ω–µ –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–º—É –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ —à–∞–Ω—Å–∞ –Ω–∞ —Å–ø–∞—Å–µ–Ω–∏–µ. –û–≤–∞—Ü–∏—è, –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã.')

    def fourthAction(self, other, ctx):
        report = f'[0]. –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é. \n'
        N = len(vb.Team.Entry(self.team).graveyard)
        for i, unit in enumerate(vb.Team.Entry(self.team).graveyard):
            report += f'{i + 1}. {unit}, —É—Ä–æ–≤–µ–Ω—å {unit.lvl}, {"üö´" if unit.isForbiddenToResurrect else "‚úÖ"} \n'
        send(ctx, report)
        for event in longpoll.listen():
            if not id_checker(self.id, ctx): continue
            current: str = event.obj['message']['text'].lower()
            if current == '0': break
            if current.isdigit() and int(current) <= N:
                target: root.HeroInstance = vb.Team.Entry(self.team).graveyard[int(current) - 1]
                if target.race != RACES.UNDEAD:
                    send(ctx, f'–¶–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∂–∏—Ç—å—é, –¥—Ä–∞–∫–æ–Ω –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –µ—ë –≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å!')
                    continue
                if not target.animate(self.team):
                    send(ctx, '–¶–µ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–∞ –ø—Ä–æ–∫–ª—è—Ç—å—é –∏—Å–∫–æ—Ä–µ–Ω–µ–Ω–∏—è.')
                    continue
                else:
                    send(ctx, f'{target} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–ª –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö!')
                    if Chance(80): target.isForbiddenToResurrect = True
                    break

    def fifthAction(self, other, ctx):
        return self.MeleePattern(other, ctx, armorIgnore=0.25 if other.hasEffect(EFF.MARKED) else 0, specialReport=Template(f'–ó–º–∏–π –æ–±—Ä—É—à–∏–≤–∞–µ—Ç –Ω–∞ {other} —Å–≤–æ–π —Ö–≤–æ—Å—Ç, –Ω–∞–Ω–æ—Å—è $dmg —É—Ä–æ–Ω–∞.'))

    def levelup(self, ind=1):
        self.dmg += 2 * ind
        self.power += 2 * ind
        super().levelup(ind)