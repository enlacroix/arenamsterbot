from datastore.deffect import EFF
from datastore.dsources import SRC
from core.root import Hero, HeroInstance
import varbank as vb
from myrandom import Chance
from vkmodule import send, longpoll, id_checker

# TODO –¥–∞–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∑–∞—â–∏—Ç—ã –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –õ–µ—á–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ñ–∏–∑–Ω–µ–π. - —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–µ—Ö–∞–Ω–∏–∫–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–∞.

class Patriarch(Hero):
    def __init__(self, _id):
        super().__init__(_id)
        self.ulta = 1

    def options(self, other):
        opt_report = f'[1] {{–í–æ–∑–¥—É—Ö}} –ì–Ω–µ–≤ –±–æ–≥–æ–≤ (–ü–æ –∫–æ–ª–æ–Ω–Ω–µ), 2 –ú–† \n ' \
                     f'[2] –ò–∑–æ–±–∏–ª—å–Ω—ã–π —Å–≤–µ—Ç. –õ–µ—á–µ–Ω–∏–µ —Ü–µ–ª–∏, 3 –ú–† \n' \
                     f'[3]** –ú–∏–ª–æ—Å—Ç—å –ú–ª–∞–¥—à–µ–≥–æ. –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ —Å–æ—é–∑–Ω–∏–∫–æ–≤, 5 –ú–† \n' \
                     f'[4] –°–≤—è—Ç–∏–ª–∏—â–µ. –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—â–∏—Ç–∏—Ç—å —Ü–µ–ª—å —Ç–∞–∫, —á—Ç–æ –µ—ë –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å—é –∞—Ç–∞–∫–∏, {self.ulta} –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. \n' \
                     + super().options(other)
        return opt_report

    def firstAction(self, other, ctx):
        for enemy in other.getOwnColumn():
            x = self.MagicPattern(enemy, ctx, source=SRC.AIR, mana=1)
            if x in (0, -1): return x

    def secondAction(self, other, ctx):
        if self.allyActionForEnemy(other, ctx): return -1
        if not self.spend_mana(3, ctx): return -1
        send(ctx, f'{other.heal(other.lvl * 7 + self.power // 3)} –∑–¥–æ—Ä–æ–≤—å—è –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ü–∞—Ç—Ä–∏–∞—Ä—Ö–æ–º.')


    def thirdAction(self, other, ctx):
        if not self.isAtSecondRow(ctx): return -1
        if not self.spend_mana(5, ctx): return -1
        report = f'[0]. –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é. \n'
        N = len(vb.Team.Entry(self.team).graveyard)
        for i, unit in enumerate(vb.Team.Entry(self.team).graveyard):
            report += f'{i+1}. {unit}, —É—Ä–æ–≤–µ–Ω—å {unit.lvl}, {"üö´" if unit.isForbiddenToResurrect else "‚úÖ"} \n'
        send(ctx, report)
        for event in longpoll.listen():
            if not id_checker(self.id, ctx): continue
            current: str = event.obj['message']['text'].lower()
            if current == '0': break
            if current.isdigit() and int(current) <= N:
                target : HeroInstance = vb.Team.Entry(self.team).graveyard[int(current) - 1]
                if not target.animate(self.team):
                    send(ctx, '–¶–µ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–∞ –ø—Ä–æ–∫–ª—è—Ç—å—é –∏—Å–∫–æ—Ä–µ–Ω–µ–Ω–∏—è.')
                    continue
                else:
                    send(ctx, f'{target} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–ª –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö!')
                    if Chance(50): target.isForbiddenToResurrect = True
                    break

    def fourthAction(self, other: HeroInstance, ctx):
        if not self.ulta > 0: return -1
        self.ulta -= 1
        other.addEffect(EFF.SANCTUM, 2 + self.lvl // 5)
        send(ctx, f'–í—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ—Å—å –ø–æ–¥ –∑–∞—â–∏—Ç–Ω—ã–º –∫—É–ø–æ–ª–æ–º –ü–∞—Ç—Ä–∏–∞—Ä—Ö–∞.')

    def levelup(self, ind=1):
        if self.hidden_lvl % 7 == 0: self.ulta += 1
        self.arm += 3 * ind
        self.power += 4 * ind
        self.mana += 1 * ind
        super().levelup(ind)