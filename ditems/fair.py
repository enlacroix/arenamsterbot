from functools import reduce
from random import randint, sample
from background import stats_dict
from datastore.dperks import ITEMPERKS
from ditems.itemcls import Item
from settings import SHOP_SIZE
from vkmodule import send, longpoll, id_checker
import varbank as vb


def enoughMoney(unit, item):
    if item.getPurchasePrice(unit) <= vb.Team.Entry(unit.team).gold: return 'üí∞'
    return ''

def show_prices(unit, shopList):
    if len(shopList) == 0: return '–í—Å—ë —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω–æ.'
    output = ''
    for i, item in enumerate(shopList):
        output += f'{i+1}. {item.name} ({item.getPurchasePrice(unit)} –∑–æ–ª), {item.showAbility(unit)} {enoughMoney(unit, item)}\n{item.description}. \n'
    return f'{unit}, [{unit.team + 1}]: \n {output} \n [–∫—É–ø n] - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º n. \n [–∏–Ω–≤] - –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏. \n' \
    '[–ø—Ä–æ–¥ n] - –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º n. \n [—Å—Ç–æ–ø] - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫–∏.'


def individual_trade(unit, shopList: list[Item], beginEvent):
    """
    –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω: –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —è—Ä–º–∞—Ä–∫—É –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞ –∏ –ª—É—á—à–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤.
    """
    send(beginEvent, show_prices(unit, shopList))
    send(beginEvent, f'–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: {vb.Team.Entry(unit.team).gold} –º–æ–Ω–µ—Ç. –ù–∞–≤—ã–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏: {round(unit.merchant * 100)}%. \n –ü–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {", " .join([perk.value[0] for perk in set(reduce(lambda a, x: a + x.skills, vb.teams[unit.team], [])) if perk in ITEMPERKS])}')
    for event in longpoll.listen():
        if not id_checker(unit.id, event): continue
        try:
            current = event.obj['message']['text'].lower()
        except:
            continue
        match current.split(' '):
            case ['–∫—É–ø', n] if n.isdigit() and 1 <= int(n) <= len(shopList):
                good: Item
                good = shopList[int(n) - 1]
                if good.getPurchasePrice(unit) > vb.Team.Entry(unit.team).gold:
                    send(event, f'–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {good.getPurchasePrice(unit) - vb.Team.Entry(unit.team).gold} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è {good}.')
                    continue
                else:
                    vb.Team.Entry(unit.team).gold -= good.getPurchasePrice(unit)
                    unit.inv.addItem(good) # TODO —Ä–µ—à–∏—Ç—å –∫–æ–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç.
                    shopList.remove(good)
                    send(event, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ {good}!')
                    break
            case ['–∏–Ω–≤' | 'i' | '—à']:
                send(event, unit.inv.showInventoryWithPrices())  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–µ–∫—É–ª—è–Ω—Ç–æ–≤. 0.925 = –°–†–ï–î(0.7, 1.15)
                continue
            case ['–ø—Ä–æ–¥', n] if n.isdigit() and 1 <= int(n) <= len(unit.inv):
                sell: Item
                sell = unit.inv.getItem(int(n))
                assert sell is not None, '–ß–ó–•'
                vb.Team.Entry(unit.team).gold += sell.getSalePrice(unit)
                unit.inv.removeItem(sell)
                shopList.append(sell)
                send(event, f'–í–æ—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏. –ú—ã –Ω–∞–π–¥–µ–º –¥–æ—Å—Ç–æ–π–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {sell}.')
                break
            case ['–ø—Ä–æ–¥', '–≤—Å–µ' | '–≤—Å—ë']:
                for item, amount in list(unit.inv.pool.items()): # —É—á–∏—Ç—ã–≤–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
                    vb.Team.Entry(unit.team).gold += item.getSalePrice(unit) * amount
                    unit.inv.removeItem(item, amount)
                    shopList.append(item)
                send(event, f'–í—ã –ø—Ä–æ–¥–∞—ë—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.')
                break
            case ['—Å—Ç–æ–ø']:
                send(event, '–î–æ—Å–≤–∏–¥–∞–Ω–∏—è—Å–ø–∞—Å–∏–±–æ–ø—Ä–∏—Ö–æ–¥–∏—Ç–µ–µ—â—ë.')
                vb.Team.Entry(unit.team).gold += round(stats_dict[unit.__class__.__name__].gold * 1.35 + randint(50, 100))
                return False
            case _:
                continue


def competitive_trade(A, B, ctx):
    """

    l = sorted([A, B], key=lambda x: x.ini + x.gold/75, reverse=True)
    –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ç–æ—Ä–≥–∏. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤—Å–µ—Ö –∏–∑ 12 –æ–±—ä–µ–∫—Ç–æ–≤. –ò–≥—Ä–æ–∫ –ê –ø–æ–∫—É–ø–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ –æ–¥–Ω—É –≤–µ—â—å –Ω–∞ –≤—ã–±–æ—Ä, –ø–æ—Ç–æ–º —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∏–≥—Ä–æ–∫—É –í,
    –¥–æ —Ç–µ—Ö –ø–æ–∫–∞ –û–ë–ê –Ω–µ –Ω–∞–ø–∏—à—É—Ç —Å—Ç–æ–ø. –ï—Å–ª–∏ –æ–¥–∏–Ω –Ω–∞–ø–∏—à–µ—Ç —Å—Ç–æ–ø, —Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç –¥–æ —Ç–æ–≥–æ, –ø–æ–∫–∞ —Å–∞–º –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç.
    :param A: l[0] —Ç–æ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ / –Ω–∞—á–∏–Ω–∞—é—â–∏–º –ø–µ—Ä–≤—ã–º
    :param B: l[1] –¥–æ–≥–æ–Ω—è—é—â–∏–π
    """
    shop = Item.createRandItems(SHOP_SIZE)
    flag_a, flag_b = None, None
    while True:
        if flag_a is None:
            flag_a = individual_trade(A, shop, ctx)
        if flag_b is None:
            flag_b = individual_trade(B, shop, ctx)
        if flag_a is not None and flag_b is not None:
            send(ctx, '–Ø—Ä–º–∞—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞ —Ç–µ–ø–µ—Ä—å –º—ã –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—é.')
            break