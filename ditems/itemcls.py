from random import sample
from typing import Self

from datastore.dinventroy import inventory_dict
from datastore.dperks import PRK, PerkCategoryDict



class Item:
    def __init__(self, code: int):
        self.code = code
        # TODO –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–æ—Ä–∏ –¥–∏–∫—Ç –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –±–∞–≥–æ–≤, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ù–£–ñ–ù–û –∏–∑–±–∞–≤–∏—Ç—å—Å—è.
        res = inventory_dict[code][0].split(" | ")
        if len(res) == 2:
            self.name, self.description = res
        else:
            self.name = res[0]
            self.description = res[0]
        self.cost = inventory_dict[code][1]
        # –ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–∏–º —É–≥–æ–¥–Ω–æ —á–∏—Å–ª–æ–º (–Ω–∞—á–∏–Ω–∞—è —Å –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö), –æ–¥–Ω–∞–∫–æ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞ - –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–µ—Ä–≤–∞—è - —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞.
        self.category: int = code % 10
        self.tier = int(str(code)[0])
        self.charges = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
        self.protection_from_steal = False  # –ú–æ–∂–Ω–æ –ª–∏ —É–∫—Ä–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç.
        self.protection_from_destroy = False  # –ú–æ–∂–Ω–æ –ª–∏ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç.

    def generalUseItem(self, result, owner):
        self.charges -= 1
        if result not in (0, -1) and self.charges <= 0:
            owner.inv.removeItem(self)
        return result

    def __str__(self):
        return self.name

    def show(self):
        return f'{self.name}: {self.description}'

    def getAmount(self, inventory):
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç, —Ç–æ –≤–µ—Ä–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0.
        return inventory.pool.get(self, 0)

    def getPurchasePrice(self, owner):
        return round(self.cost * max(0.8, 1.2 - owner.merchant))

    def getSalePrice(self, owner):
        return round(self.cost * min(0.8, 0.6 + owner.merchant * 0.5))

    def getPosition(self, inventory):
        try:
            return inventory.content.index(self) + 1
        except ValueError:
            return False

    def showAbility(self, owner):
        """
        :return: —Å–º–∞–π–ª–∏–∫ ‚úÖ, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
        –∏–ª–∏ üö´ c —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –Ω–∞–≤—ã–∫–∞.
        """
        if self.isAble(owner):
            return ' ‚úÖ'
        else:
            return f' üö´, {PerkCategoryDict[self.category].value[0]}.'

    def isAble(self, owner) -> bool:
        """–µ—Å—Ç—å –Ω–∞–≤—ã–∫ –∏–ª–∏ –Ω–µ—Ç"""
        return PerkCategoryDict[self.category] in owner.skills

    def __eq__(self, other):
        return self.code == other.code

    def __hash__(self):
        return hash(self.code)

    @classmethod
    def createRandItemsByType(cls, _type: tuple[int, ...], count=1) -> list[Self]:
        rtrn = []
        for key in sample([x for x in list(inventory_dict.keys()) if x % 10 in _type], count):
            rtrn.append(cls(key))
        return rtrn

    @classmethod
    def createRandItemsByTypeAndTier(cls, _type: int, infimum, supremum, count=1) -> list[Self]:
        rtrn = []
        for key in sample([x for x in list(inventory_dict.keys()) if x % 10 == _type and infimum <= x // 100 <= supremum], count):
            rtrn.append(cls(key))
        return rtrn

    @classmethod
    def createRandItemsByTier(cls, infimum, supremum, count=1) -> list[Self]:
        """
        :param infimum: –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        :param supremum: –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–∏—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞. –í–µ—Ä–Ω–µ—Ç —á—Ç–æ-—Ç–æ, —á—Ç–æ –ª–µ–∂–∏—Ç –≤ –æ—Ç—Ä–µ–∑–∫–µ [inf, sup].
        :param count: —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.
        :return: —Å–ø–∏—Å–æ–∫ –∏–∑ Item, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–∞–º.
        """
        rtrn = []
        for key in sample([x for x in list(inventory_dict.keys()) if infimum <= x // 100 <= supremum], count):
            rtrn.append(cls(key))
        return rtrn

    @classmethod
    def createRandItems(cls, count) -> list[Self]:
        return [cls(key) for key in sample(tuple(inventory_dict.keys()), count)]

    def use(self, owner, other, ctx):
        """
        :return: –≤—Å–µ–≥–¥–∞ –º–µ—Ç–æ–¥—ã use() –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 1 (—É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ), -1(–¥–∞—Ç—å —Ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –æ—à–∏–±–∫–∞), 0(?)
        —Å–≤—è–∑–∞—Ç—å —Å GENERAL USE ITEM (–í–´–®–ï)
        """
        pass


