# from root import HeroInstance
from datastore.deffect import EFF
from datastore.dperks import PRK, ITEMPERKS
from random import sample
from datastore.dsources import SRC
from core.root import HeroInstance
from vkmodule import send, longpoll, id_checker


# itemPerks = [PRK.AURAS, PRK.TECHNO, PRK.TALISMANS, PRK.ORBS, PRK.SCROLLS, PRK.ARTIFACTS, PRK.STAFFS, PRK.MISC, PRK.MILITARY, PRK.RELICS]
# anotherPerks = [prk for prk in PRK if prk not in itemPerks]

def benefits(unit: HeroInstance, chosenPerk):
    match chosenPerk:
        case PRK.LUCKYBASTARD:
            unit.crit_bank += 1
            unit.dodge_bank += 1
        case PRK.MANDATEOFHEAVEN:
            unit.max_hp = round(1.25 * unit.max_hp)
            unit.heal_rate += 0.25
        case PRK.ARMORPENETRATOR:
            unit.armor_penetration += 0.3
        case PRK.SHINEOFTHISUNGLASSES:
            unit.addEffect(EFF.REFLECTION, 5)
        case PRK.LONGWEAPON:
            unit.lengthOfWeapon += 1
        case PRK.GRAND_MERCHANT:
            unit.merchant += 0.25
        case PRK.MORESUMMONS:
            unit.max_summons += 1
        case PRK.SIGMALIKE:
            unit.resists[SRC.STUN].changeValue(40)
        case _:
            pass


def perkMenu(unit, ctx):
    if unit.isSummon: return 0
    if unit.health <= 0 and unit.lives <= 0: return 0
    if not unit.hidden_lvl % unit.develop == 0: return 0 # –µ—â–µ –±—ã–ª–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ unit.hidden_lvl > 0, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —á—Ç–æ —è –∏–º–µ–ª –≤ –≤–∏–¥—É.
    anotherPerks = [prk for prk in PRK if prk not in ITEMPERKS]
    mySample = sample(ITEMPERKS, 4) + sample(anotherPerks, 2)
    report = f''
    for i, elem in enumerate(mySample):
        report += f'{i+1}. {elem.value[0]}: {elem.value[1]} {"‚õî" if unit.hasPerk(elem) else "‚úÖ"}\n'
    send(ctx, f'{unit}, –≤—ã –∑–∞—Å–ª—É–∂–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∫. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. \n [—Å–∫–∏–ø] - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∫—É—Å–Ω–µ–π—à–∏–π –≤—ã–±–æ—Ä, –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. ')
    send(ctx, report)
    send(ctx, str(unit.inv))
    for choice in longpoll.listen():
        try: current = choice.obj['message']['text'].lower()
        except: continue
        if not id_checker(unit.id, choice): continue
        match current:
            case '1' | '2' | '3' | '4' | '5' | '6' as num: # TODO –•–ê–†–î–ö–û–î–ò–ù–ì –ó–ê–í–Ø–ó–ê–ù–û –ù–ê –ö–û–õ–ò–ß–ï–°–¢–í–ï –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–• –ü–ï–†–ö–û–í
               if mySample[int(num) - 1] in unit.skills:
                   send(ctx, '–í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ—Ç –ø–µ—Ä–∫!')
                   continue
               chosenPerk = mySample[int(num) - 1]
               unit.skills.append(chosenPerk)
               benefits(unit, chosenPerk)
               send(ctx, f'–ü–æ–∑–¥—Ä–∞–≤–∏–º –∂–µ {unit} c –∏–∑—É—á–µ–Ω–∏–µ–º –ø–µ—Ä–∫–∞ {chosenPerk.value[0]}!')
               break
            case '—Å–∫–∏–ø':
                send(ctx, '–ó–∞–Ω—É–¥–∞ üë∫!')
                unit.levelup()
                break
            case _:
                continue



