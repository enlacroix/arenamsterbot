import random
from functools import reduce

from statistics import saveCharsCombinations, processTeamList
from storage.database import write_down_result
from datastore.deffect import EFF
from datastore.dperks import PRK
from ditems.fair import competitive_trade
from imgcreator import create_start_image, makeFieldImage
from myrandom import Chance
from perkchooser import perkMenu
from storage.savegame import saveGame, loadGame
from ditems.usages import useInventory
from utils import isPassive
from vkmodule import send, longpoll, id_checker, send_photo
import varbank as vb
from settings import *
from core import root
from charscreation import creationOfLeaders
from background import HELPSTRING, stats_dict
import copy


def live(members):
    return sorted([x for x in members if x not in vb.done and x not in vb.delayed and x.alive()],
                  key=lambda x: x.ini + random.randint(1, 5), reverse=True) + [unit for unit in vb.delayed[::-1] if unit not in vb.done and unit.alive()]
    # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

def getActualMembers(): return sum(vb.teams, [])

def anyoneAliveInTeam(team_number): return any(member.alive() for member in vb.teams[team_number])

def getMember(team, postfix, event):
    try:
        target = vb.teams[team][int(postfix[1]) - 1]
        return target
    except IndexError:
        send(event, f'–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂.')
        return -1
    except ValueError:
        return -1

def showStatsOfTeam(team):
    return '\n'.join((member.show_stats(inv=False, effects=True, perks=False, resists=True) for member in vb.teams[team]))

def combat(event, id1, id2, loadFlag=False):
    """
    :param loadFlag: –µ—Å–ª–∏ –∏—Å—Ç–∏–Ω–∞, —Ç–æ –º–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    :param event:
    :param id1: –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–ø–∏—Å–∞–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '–ø–≤–ø'
    :param id2: —Ç–æ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –±–æ–π.
    :return:
    """
    if loadFlag:
        vb.teams, vb.done, vb.delayed, vb.stage = loadGame()
    else:
        vb.teams = creationOfLeaders(event, id1, id2) if not loadFlag else loadGame()
    vb.archive = copy.deepcopy(vb.teams)
    for member in getActualMembers(): member.startInventory()
    for num in (0, 1):
        vb.Team.Entry(num).gold = round(reduce(lambda acum, y: acum + stats_dict[y.__class__.__name__].gold * GOLD_BONUS, vb.teams[num], 0) * (0.75 if len(vb.teams[num]) > 1 else 1))
    send(event, f'–ó–æ–ª–æ—Ç–æ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {vb.Team.Entry(0).gold}, –∑–æ–ª–æ—Ç–æ –≤—Ç–æ—Ä–æ–π: {vb.Team.Entry(1).gold}')
    firstLeader, secondLeader = vb.teams[0][0], vb.teams[1][0]
    if SEND_IMAGES:
        create_start_image(firstLeader, secondLeader)
        send_photo(f'{firstLeader} —Å–æ–π–¥—ë—Ç—Å—è –≤ –ø–æ–µ–¥–∏–Ω–∫–µ –ø—Ä–æ—Ç–∏–≤ {secondLeader}. [—Å–ø—Ä–∞–≤–∫–∞] –î–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. \n –î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –±–∏—Ç–≤–∞!', event, 'imgs\\combat.png')
    vb.stage = 1
    while vb.stage < MAX_ROUNDS and anyoneAliveInTeam(0) and anyoneAliveInTeam(1):
        for member in getActualMembers():
            perkMenu(member, event)
            member.effects.timeTicks()
            member.effects.checkEnding()
        while True:
            try:
                unit = live(getActualMembers())[0]
            except IndexError:
                for member in getActualMembers(): member.levelup()
                send(event, f'üé≠ –†–∞—É–Ω–¥ {vb.stage} –æ–∫–æ–Ω—á–µ–Ω.')
                vb.stage += 1
                break
            try: print(vb.stage, unit, ' —Ö–æ–¥–∏—Ç –ø—Ä–æ—Ç–∏–≤ ', vb.teams[(unit.team + 1) % 2][0])
            except IndexError: pass
            print('–û—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–∞:', list(map(str, (live(getActualMembers())))))

            if unit not in vb.done:
                turn(event, unit)
                if unit.hasPerk(PRK.LOWHP_EXTRATURN) and Chance(round((1 - (unit.health / unit.max_hp)) * 80)):
                    send(event, f'–°—Ç–∞–ª—å–Ω–∞—è –≤–æ–ª—è, –∂–µ–ª–µ–∑–Ω—ã–µ –Ω–µ—Ä–≤—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å {unit.cls_name} –µ—â–µ –æ–¥–∏–Ω —Ö–æ–¥!')
                    turn(event, unit)
            if Chance(unit.morale) and unit in vb.done:
                unit.rewardForHighMorale()
            print('–ù–∞ –æ–∂–∏–¥–∞–Ω–∏–∏:', list(map(str, vb.delayed)))
            print('–ü–æ—Ö–æ–¥–∏–≤—à–∏–µ', list(map(str, vb.done)))

        for x in getActualMembers(): x.update()
        vb.delayed.clear()
        vb.done.clear()
        # vb.disabled = []
        if vb.stage % FAIR_FREQUENCY == 0 and anyoneAliveInTeam(0) and anyoneAliveInTeam(1):
            send(event, f'–Ø—Ä–º–∞—Ä–∫–∞ {vb.stage // FAIR_FREQUENCY} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!')
            fairLine = sorted([vb.teams[0][0], vb.teams[1][0]], key=lambda y: y.ini + y.gold / 75, reverse=True)
            competitive_trade(*fairLine, event) # fairLine[0], fairLine[1]

    fin_of_battle(firstLeader, secondLeader, vb.stage, event) # –õ—É—á—à–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, –ø–æ—Å–∫–æ–ª—å–∫—É —Å—Ç–∞—Ä—ã–π –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç —É–º–µ—Ä–µ—Ç—å.




def turn(event, A):
    """
    :param event: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ send()
    :param A: –ê—Ç–∞–∫—É—é—â–∏–π –∏–≥—Ä–æ–∫
    :return:
    """
    if not A.was_effected: A.effects.applyVOTs(event)
    A.resurrect(event)
    A.psycho(event)
    A.effects.checkEnding() # TODO –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏–º–µ–µ—Ç –ª–∏ —Å–º—ã—Å–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å?
    A.normalize()
    if A.checkStun(event): return 0
    if A.hasEffect(EFF.SLEEPING):
    # todo –Ω–æ –Ω—É–∂–Ω–æ —Ç–æ–≥–¥–∞ –≤–Ω–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä previousHealth, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ö–æ–¥—É
        send(event, f'{A} —Å–ª–∞–¥–∫–æ —Å–ø–∏—Ç –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥. –°–ø–∏, –º–æ—è —Ä–∞–¥–æ—Å—Ç—å, —É—Å–Ω–∏.')
        A.sleeping -= 1
        vb.done.append(A)
        return 0
    if A.health <= 0:  # –°–º–µ—Ä—Ç—å –æ—Ç –¥–æ—Ç–∞. –û–≥–ª—É—à—ë–Ω–Ω—ã–π –∏ —É–º–∏—Ä–∞—é—â–∏–π –æ—Ç –¥–æ—Ç–∞ –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–Ω–µ—Ç, –µ—Å–ª–∏ —Å–º–µ—Å—Ç–∏—Ç—å –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ —ç—Ç–æ. –§–∏—á–∞?
        return 0
    if not anyoneAliveInTeam((A.team + 1) % 2): # B.death(event) TODO –†–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–ª—Å—è death(event) –¥–ª—è —Å–∞–º–º–æ–Ω–∞, –µ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å, –Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.
        vb.done.append(A)
        return 0
    # if isinstance(A, root.Summon) and not isinstance(A, root.Mercenary) and A.master.health <= 0:
    #     # –í–æ—Ç –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞–µ–º–Ω–∏–∫–æ–≤ –∏ –µ—â–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∞—Ä—Ç–∏—é.
    #     send(event, f'–•–æ–∑—è–∏–Ω –ø–æ–≥–∏–±, –ø–æ—ç—Ç–æ–º—É {A.cls_name} –∏—Å—á–µ–∑–∞–µ—Ç –≤ –Ω–µ–±—ã—Ç–∏–µ, –Ω–µ —Å–æ–≤–µ—Ä—à–∏–≤ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞.')
    #     vb.done.append(A)
    #     return 0
    if A.not_waited: A.preChoiceAction(vb.teams[(A.team + 1) % 2][0], event)
    send(event, A.show_stats(False, True, False, False) + A.options(vb.teams[(A.team + 1) % 2][0]))
    actionDict = {'1': A.firstAction, '2': A.secondAction, '3': A.thirdAction, '4': A.fourthAction, '5': A.fifthAction}

    for choice in longpoll.listen():
        try:
            current = choice.obj['message']['text'].lower()
        except: # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω–µ—Ç —Ñ–æ—Ç–æ, —Ç–æ –ø—Ä–æ—Å–ª—É—à–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            continue
        if not id_checker(A.id, choice): continue #  and id_checker(A.id, choice)
        match current.split(' '): # todo –∏—Å–ø 4 e1 –æ—Ç–¥ 2 a2 –∏–Ω—Ñ–æ 1
            case ['1' | '2' | '3' | '4' | '5'] as text:
                B = vb.teams[(A.team + 1) % 2][0]
                method = actionDict[text[0]]
                if not isPassive(A, method):
                    if B.hasEffect(EFF.INVISIBLE):
                        send(event, f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –≤–∏–¥–∏—Ç–µ {B}. –û–Ω –∏—Å–ø–∞—Ä–∏–ª—Å—è...')
                        continue
                    if B.hasEffect(EFF.SANCTUM):
                        send(event, f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É {B} –∑–∞—â–∏—â–µ–Ω –º–æ—â–Ω–µ–π—à–∏–º–∏ –æ—Ö—Ä–∞–Ω–Ω—ã–º–∏ —á–∞—Ä–∞–º–∏.')
                        continue
                    if A.hasEffect(EFF.INVISIBLE):
                        A.effects.delEffect(EFF.INVISIBLE)
                        send(event, f'–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –≤–∞—à–∞ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø–∞–ª–∞ –≤ —Ç–æ—Ç –∂–µ –º–∏–≥.')
                if method(B, choice) == -1:
                    send(event, '–î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω—ã.')
                    continue
                else:
                    vb.done.append(A)
                    break
            case ['1' | '2' | '3' | '4' | '5', postfix] as text if len(postfix) == 2 and postfix[0] in ('e', 'a', '–µ', '–∞'):
                command = text[0]
                team = A.team if postfix[0] in ('a', '–∞') else (A.team + 1) % 2
                B = getMember(team, postfix, event)
                if B == -1: continue
                # beginHealthOfB = B.health
                method = actionDict[command]
                if not isPassive(A, method):
                    if B.hasEffect(EFF.INVISIBLE):
                        send(event, f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –≤–∏–¥–∏—Ç–µ {B}. –û–Ω –∏—Å–ø–∞—Ä–∏–ª—Å—è...')
                        continue
                    if B.hasEffect(EFF.SANCTUM):
                        send(event, f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ—Å–∫–æ–ª—å–∫—É {B} –∑–∞—â–∏—â–µ–Ω –º–æ—â–Ω–µ–π—à–∏–º–∏ –æ—Ö—Ä–∞–Ω–Ω—ã–º–∏ —á–∞—Ä–∞–º–∏.')
                        continue
                    if A.hasEffect(EFF.INVISIBLE):
                        A.effects.delEffect(EFF.INVISIBLE)
                        send(event, f'–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –≤–∞—à–∞ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–ø–∞–ª–∞ –≤ —Ç–æ—Ç –∂–µ –º–∏–≥.')
                if method(B, choice) == -1:
                    continue
                else:
                    vb.done.append(A)
                    break

            case ['w' | '—Ü']:
                if A.wait(choice) == -1: continue
                else: break
            case ['–∏–Ω–≤' | 'i' | '—à']:
                send(choice, str(A.inv))
                continue
            case ['d' | '–≤']:
                if A.protection(choice) == -1:
                    continue
                else:
                    vb.done.append(A)
                    break
            case ['—Å–∫–∏–ø']:
                vb.done.append(A)
                break
            case ['t1']:
                send(choice, showStatsOfTeam(A.team))
                continue
            case ['t2']:
                send(choice, showStatsOfTeam((A.team + 1) % 2))
                continue
            case ['–ø–æ–ª–µ' | 'f' | '–∞']:
                makeFieldImage(vb.teams)
                send_photo(f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–Ω–µ—Å–µ–Ω–∏—è, –º–∏–ª–æ—Ä–¥:', event, 'imgs\\field.png')
                continue
            case ['—Å–¥–∞—Ç—å—Å—è']:
                send(choice, f'–í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ü–æ–≤–∫—É, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {A} —Å–¥–∞—ë—Ç—Å—è –∏ –ø–æ–∫–∏–¥–∞–µ—Ç –ø–æ–ª–µ –±–æ—è —Å –ø–æ–∑–æ—Ä–æ–º.')
                A.kill()
                vb.done.append(A)
                break
            case ['—Å–ø—Ä–∞–≤–∫–∞']:
                send(choice, HELPSTRING)
                continue
            case ['m' | '—å']:
                if not A.movement():
                    send(choice, '–í—ã –æ–±–µ–∑–¥–≤–∏–∂–µ–Ω—ã –∏–ª–∏ –Ω–∞ —Ä—è–¥—É –Ω–µ—Ç –º–µ—Å—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ —Å–µ–π—á–∞—Å —Å–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é.')
                    continue
                else:
                    send(choice, f'{A} –º–µ–Ω—è–µ—Ç —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –ø–æ–ª–µ –±–æ—è.')
                if A.hasPerk(PRK.BONUS_MOVEMENT) and Chance(65):
                    send(choice, f'–ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Ä–∞—Å—Ç–æ—Ä–æ–ø–Ω–æ—Å—Ç–∏ {A} –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ö–æ–¥!')
                    continue
                else:
                    vb.done.append(A)
                    break
            case ['–æ–±–Ω–æ–≤' | 'upd', postfix] if len(postfix) == 2 and postfix[0] in ('e', 'a', '–µ', '–∞'):
                team = A.team if postfix[0] in ('a', '–∞') else (A.team + 1) % 2
                target = getMember(team, postfix, event)
                if target == -1: continue
                send(event, A.options(target))
                continue
            case ['–∏–Ω—Ñ–æ' | 's' | '—ã', postfix] if len(postfix) == 2 and postfix[0] in ('e', 'a', '–µ', '–∞'): # s - scout.
                team = A.team if postfix[0] in ('a', '–∞') else (A.team + 1) % 2
                target = getMember(team, postfix, event)
                if target == -1: continue
                send(event, target.show_stats(inv=False, effects=True, perks=True, resists=True))
                continue
            case ['–∏—Å–ø' | 'u', num]:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                if useInventory(invoker=A, target=A, position=num, ctx=choice) == -1:
                    continue
                else:
                    vb.done.append(A)
                    break
            case ['–∏—Å–ø' | 'u', num, postfix] if len(postfix) == 2 and postfix[0] in ('e', 'a', '–µ', '–∞'):
                # –ú—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫ –°–û–Æ–ó–ù–ò–ö–£ (–°–ï–ë–ï). –∏—Å–ø 1 –∞2 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç 1 –Ω–∞ —Å–æ—é–∑–Ω–∏–∫–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 2.
                # –ü—Ä–∏–º–µ—Ä: –ª–µ—á–∞—â–∏–π —ç–ª–∏–∫—Å–∏—Ä. –¢–µ–ø–µ—Ä—å –∑–¥–æ—Ä–æ–≤—å–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è target, —Ç.–µ. —Ç–æ–º—É –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∞().
                target = getMember(A.team if postfix[0] in ('a', '–∞') else (A.team + 1) % 2, postfix, event)
                if target == -1: continue
                if useInventory(invoker=A, target=target, position=num, ctx=choice) == -1:
                    continue
                else:
                    vb.done.append(A)
                    break
            case ['—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å']:
                saveGame([vb.teams, vb.done, vb.delayed, vb.stage])
                send(event, '–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
                continue
            case ['s' | '—ã']: # line (–æ—á–µ—Ä–µ–¥—å)
                liveSeq = ', '.join([unit.describe() for unit in live(getActualMembers())])
                delayedSeq = ', '.join([unit.describe() for unit in vb.delayed])
                doneSeq = ', '.join([unit.describe() for unit in vb.done])
                send(event, f'–û—á–µ—Ä—ë–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–∞: {liveSeq}. \n –ü–æ–¥–æ–∂–¥–∞–≤—à–∏–µ: {delayedSeq} \n –ü–æ—Ö–æ–¥–∏–≤—à–∏–µ: {doneSeq}')
                continue
            case ['—à—Ç—Ä–∞—Ñ', num] if num.isdigit():
                send(event, f'"–û—Ö –¥–µ—Ä—å–º–æ, –∏–∑–≤–∏–Ω–∏", - –≥–æ–≤–æ—Ä–∏—Ç {A}, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ {num} –∑–æ–ª–æ—Ç—ã—Ö. –î–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –∞ –≤–∞—à —Ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.')
                vb.Team.Entry(A.team).gold -= int(num)
                vb.Team.Entry(A.enemyTeam).gold += int(num)
                continue
            case _:
                continue
    for unit in getActualMembers():
        if not unit.death(event):
            unit: root.HeroInstance
            if unit.hasEffect(EFF.SLEEPING) and unit.health < unit.previousHealth:
                send(event, f'{unit} –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω –∏ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –±–æ–π.')
                unit.effects.delEffect(EFF.SLEEPING)
        unit.previousHealth = unit.health


def fin_of_battle(A, B, stage, event):
    if stage == MAX_ROUNDS:
        send(event, f'#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –°—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–∏–ª–æ—Å—å {MAX_ROUNDS} —Ä–∞—É–Ω–¥–æ–≤, –±–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ù–∏ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–æ—Ä–æ–Ω —Ç–∞–∫ –∏ –Ω–µ —Å–º–æ–≥–ª–∞ –≤–∑—è—Ç—å –≤–µ—Ä—Ö. –ù–∏—á—å—è! ')
        return
    if anyoneAliveInTeam(0) and not anyoneAliveInTeam(1):
        winner, loser = A, B
        winnerTeam = 0
    elif not anyoneAliveInTeam(0) and anyoneAliveInTeam(1):
        winner, loser = B, A
        winnerTeam = 1
    else:
        send(event, '#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –í —ç—Ç–æ–π –±–æ–π–Ω–µ –Ω–µ –±—ã–ª–æ –Ω–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –Ω–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö. –û–±–∞ –≤–æ–∏–Ω–∞ –Ω–µ–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω—ã - –Ω–∏—á—å—è.')
        return
    send(event, f'#—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –î—É—ç–ª—å –≤—ã–∏–≥—Ä–∞–ª [id{str(winner.id)}|{winner.name}]. –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {reduce(lambda a, x: a + f" {x.cls_name};", vb.archive[winnerTeam], "")}')
    send(event, f'–ê –≤–∞–º, [id{str(loser.id)}|{loser.name}], –Ω–∞–¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è. –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ: {reduce(lambda a, x: a + f" {x.cls_name};", vb.archive[(winnerTeam + 1) % 2], "")}')
    if RATING_GAME: write_down_result(winner, loser)
    saveCharsCombinations(processTeamList(vb.archive))

    # –í–Ω–µ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–µ –æ–± –∏–º–µ–Ω–∞—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ, –∞ —Ç–∞–∫–∂–µ –æ–± –∏—Ö –∫–ª–∞—Å—Å–∞—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    # if ban_user_if_lose:
    #     send(event, f'–ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–≥–æ–≤–æ—Ä –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ! –ü—Ä–æ—â–∞–π—Ç–µ, {loser.name}.')
    #     vk_session.method("messages.removeChatUser", {"chat_id": event.chat_id, "member_id": loser.id})




